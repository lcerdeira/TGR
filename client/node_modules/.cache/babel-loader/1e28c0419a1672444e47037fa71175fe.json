{"ast":null,"code":"import { GET_PLACES, SET_LOADING, PLACES_ERROR, ADD_PLACE, DELETE_PLACE, UPDATE_PLACE, CURRENT_PLACE, CLEAR_CURRENT, FILTER_PLACES, CLEAR_FILTER } from '../actions/types';\nconst initialState = {\n  places: null,\n  current: null,\n  loading: false,\n  filtered: null,\n  error: null\n};\nexport default function (state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_PLACES:\n      return { ...state,\n        places: payload,\n        loading: false\n      };\n\n    case ADD_PLACE:\n      return { ...state,\n        places: [...state.places, payload],\n        loading: false\n      };\n\n    case UPDATE_PLACE:\n      return { ...state,\n        places: state.places.map(place => place._id === payload._id ? payload : place),\n        loading: false\n      };\n\n    case DELETE_PLACE:\n      return { ...state,\n        places: state.places.filter(place => place._id !== payload),\n        loading: false\n      };\n\n    case FILTER_PLACES:\n      return { ...state,\n        filtered: state.places.filter(place => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return place.title.match(regex);\n        })\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null\n      };\n\n    case CURRENT_PLACE:\n      return { ...state,\n        current: payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case SET_LOADING:\n      return { ...state,\n        loading: true\n      };\n\n    case PLACES_ERROR:\n      console.error(payload);\n      return { ...state,\n        error: payload\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/lcer0001/GitHub/biodash/client/src/reducers/place.js"],"names":["GET_PLACES","SET_LOADING","PLACES_ERROR","ADD_PLACE","DELETE_PLACE","UPDATE_PLACE","CURRENT_PLACE","CLEAR_CURRENT","FILTER_PLACES","CLEAR_FILTER","initialState","places","current","loading","filtered","error","state","action","type","payload","map","place","_id","filter","regex","RegExp","title","match","console"],"mappings":"AAAA,SACEA,UADF,EAEEC,WAFF,EAGEC,YAHF,EAIEC,SAJF,EAKEC,YALF,EAMEC,YANF,EAOEC,aAPF,EAQEC,aARF,EASEC,aATF,EAUEC,YAVF,QAWO,kBAXP;AAaA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE,IADW;AAEnBC,EAAAA,OAAO,EAAE,IAFU;AAGnBC,EAAAA,OAAO,EAAE,KAHU;AAInBC,EAAAA,QAAQ,EAAE,IAJS;AAKnBC,EAAAA,KAAK,EAAE;AALY,CAArB;AAQA,eAAe,UAAUC,KAAK,GAAGN,YAAlB,EAAgCO,MAAhC,EAAwC;AACrD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AAEA,UAAQC,IAAR;AACE,SAAKlB,UAAL;AACE,aAAO,EAAE,GAAGgB,KAAL;AAAYL,QAAAA,MAAM,EAAEQ,OAApB;AAA6BN,QAAAA,OAAO,EAAE;AAAtC,OAAP;;AACF,SAAKV,SAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELL,QAAAA,MAAM,EAAE,CAAC,GAAGK,KAAK,CAACL,MAAV,EAAkBQ,OAAlB,CAFH;AAGLN,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKR,YAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELL,QAAAA,MAAM,EAAEK,KAAK,CAACL,MAAN,CAAaS,GAAb,CAAkBC,KAAD,IACvBA,KAAK,CAACC,GAAN,KAAcH,OAAO,CAACG,GAAtB,GAA4BH,OAA5B,GAAsCE,KADhC,CAFH;AAKLR,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKT,YAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELL,QAAAA,MAAM,EAAEK,KAAK,CAACL,MAAN,CAAaY,MAAb,CAAqBF,KAAD,IAAWA,KAAK,CAACC,GAAN,KAAcH,OAA7C,CAFH;AAGLN,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKL,aAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELF,QAAAA,QAAQ,EAAEE,KAAK,CAACL,MAAN,CAAaY,MAAb,CAAqBF,KAAD,IAAW;AACvC,gBAAMG,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAER,MAAM,CAACE,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,iBAAOE,KAAK,CAACK,KAAN,CAAYC,KAAZ,CAAkBH,KAAlB,CAAP;AACD,SAHS;AAFL,OAAP;;AAOF,SAAKf,YAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELF,QAAAA,QAAQ,EAAE;AAFL,OAAP;;AAIF,SAAKR,aAAL;AACE,aAAO,EAAE,GAAGU,KAAL;AAAYJ,QAAAA,OAAO,EAAEO;AAArB,OAAP;;AACF,SAAKZ,aAAL;AACE,aAAO,EAAE,GAAGS,KAAL;AAAYJ,QAAAA,OAAO,EAAE;AAArB,OAAP;;AACF,SAAKX,WAAL;AACE,aAAO,EAAE,GAAGe,KAAL;AAAYH,QAAAA,OAAO,EAAE;AAArB,OAAP;;AACF,SAAKX,YAAL;AACE0B,MAAAA,OAAO,CAACb,KAAR,CAAcI,OAAd;AACA,aAAO,EACL,GAAGH,KADE;AAELD,QAAAA,KAAK,EAAEI;AAFF,OAAP;;AAIF;AACE,aAAOH,KAAP;AAjDJ;AAmDD","sourcesContent":["import {\n  GET_PLACES,\n  SET_LOADING,\n  PLACES_ERROR,\n  ADD_PLACE,\n  DELETE_PLACE,\n  UPDATE_PLACE,\n  CURRENT_PLACE,\n  CLEAR_CURRENT,\n  FILTER_PLACES,\n  CLEAR_FILTER\n} from '../actions/types';\n\nconst initialState = {\n  places: null,\n  current: null,\n  loading: false,\n  filtered: null,\n  error: null\n};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case GET_PLACES:\n      return { ...state, places: payload, loading: false };\n    case ADD_PLACE:\n      return {\n        ...state,\n        places: [...state.places, payload],\n        loading: false\n      };\n    case UPDATE_PLACE:\n      return {\n        ...state,\n        places: state.places.map((place) =>\n          place._id === payload._id ? payload : place\n        ),\n        loading: false\n      };\n    case DELETE_PLACE:\n      return {\n        ...state,\n        places: state.places.filter((place) => place._id !== payload),\n        loading: false\n      };\n    case FILTER_PLACES:\n      return {\n        ...state,\n        filtered: state.places.filter((place) => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return place.title.match(regex);\n        })\n      };\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null\n      };\n    case CURRENT_PLACE:\n      return { ...state, current: payload };\n    case CLEAR_CURRENT:\n      return { ...state, current: null };\n    case SET_LOADING:\n      return { ...state, loading: true };\n    case PLACES_ERROR:\n      console.error(payload);\n      return {\n        ...state,\n        error: payload\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}