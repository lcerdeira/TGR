{"ast":null,"code":"import _toConsumableArray from\"/Users/lcer0001/GitHub/biodash/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/lcer0001/GitHub/biodash/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{GET_CATEGORIES,SET_LOADING,CATEGORIES_ERROR,ADD_CATEGORY,DELETE_CATEGORY,UPDATE_CATEGORY,CURRENT_CATEGORY,CLEAR_CURRENT,FILTER_CATEGORIES,CLEAR_FILTER}from'../actions/types';var initialState={categories:null,current:null,loading:false,filtered:null,error:null};export default function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;var type=action.type,payload=action.payload;switch(type){case GET_CATEGORIES:return _objectSpread(_objectSpread({},state),{},{categories:payload,loading:false});case ADD_CATEGORY:return _objectSpread(_objectSpread({},state),{},{categories:[].concat(_toConsumableArray(state.categories),[payload]),loading:false});case UPDATE_CATEGORY:return _objectSpread(_objectSpread({},state),{},{categories:state.categories.map(function(category){return category._id===payload._id?payload:category;}),loading:false});case DELETE_CATEGORY:return _objectSpread(_objectSpread({},state),{},{categories:state.categories.filter(function(category){return category._id!==payload;}),loading:false});case FILTER_CATEGORIES:return _objectSpread(_objectSpread({},state),{},{filtered:state.categories.filter(function(category){var regex=new RegExp(\"\".concat(action.payload),'gi');return category.title.match(regex);})});case CLEAR_FILTER:return _objectSpread(_objectSpread({},state),{},{filtered:null});case CURRENT_CATEGORY:return _objectSpread(_objectSpread({},state),{},{current:payload});case CLEAR_CURRENT:return _objectSpread(_objectSpread({},state),{},{current:null});case SET_LOADING:return _objectSpread(_objectSpread({},state),{},{loading:true});case CATEGORIES_ERROR:console.error(payload);return _objectSpread(_objectSpread({},state),{},{error:payload});default:return state;}}","map":{"version":3,"sources":["/Users/lcer0001/GitHub/biodash/client/src/reducers/category.js"],"names":["GET_CATEGORIES","SET_LOADING","CATEGORIES_ERROR","ADD_CATEGORY","DELETE_CATEGORY","UPDATE_CATEGORY","CURRENT_CATEGORY","CLEAR_CURRENT","FILTER_CATEGORIES","CLEAR_FILTER","initialState","categories","current","loading","filtered","error","state","action","type","payload","map","category","_id","filter","regex","RegExp","title","match","console"],"mappings":"+TAAA,OACEA,cADF,CAEEC,WAFF,CAGEC,gBAHF,CAIEC,YAJF,CAKEC,eALF,CAMEC,eANF,CAOEC,gBAPF,CAQEC,aARF,CASEC,iBATF,CAUEC,YAVF,KAWO,kBAXP,CAaA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,UAAU,CAAE,IADO,CAEnBC,OAAO,CAAE,IAFU,CAGnBC,OAAO,CAAE,KAHU,CAInBC,QAAQ,CAAE,IAJS,CAKnBC,KAAK,CAAE,IALY,CAArB,CAQA,cAAe,WAAwC,IAA9BC,CAAAA,KAA8B,2DAAtBN,YAAsB,IAARO,CAAAA,MAAQ,8CAC7CC,CAAAA,IAD6C,CAC3BD,MAD2B,CAC7CC,IAD6C,CACvCC,OADuC,CAC3BF,MAD2B,CACvCE,OADuC,CAGrD,OAAQD,IAAR,EACE,IAAKlB,CAAAA,cAAL,CACE,sCAAYgB,KAAZ,MAAmBL,UAAU,CAAEQ,OAA/B,CAAwCN,OAAO,CAAE,KAAjD,GACF,IAAKV,CAAAA,YAAL,CACE,sCACKa,KADL,MAEEL,UAAU,8BAAMK,KAAK,CAACL,UAAZ,GAAwBQ,OAAxB,EAFZ,CAGEN,OAAO,CAAE,KAHX,GAKF,IAAKR,CAAAA,eAAL,CACE,sCACKW,KADL,MAEEL,UAAU,CAAEK,KAAK,CAACL,UAAN,CAAiBS,GAAjB,CAAqB,SAACC,QAAD,QAC/BA,CAAAA,QAAQ,CAACC,GAAT,GAAiBH,OAAO,CAACG,GAAzB,CAA+BH,OAA/B,CAAyCE,QADV,EAArB,CAFd,CAKER,OAAO,CAAE,KALX,GAOF,IAAKT,CAAAA,eAAL,CACE,sCACKY,KADL,MAEEL,UAAU,CAAEK,KAAK,CAACL,UAAN,CAAiBY,MAAjB,CACV,SAACF,QAAD,QAAcA,CAAAA,QAAQ,CAACC,GAAT,GAAiBH,OAA/B,EADU,CAFd,CAKEN,OAAO,CAAE,KALX,GAOF,IAAKL,CAAAA,iBAAL,CACE,sCACKQ,KADL,MAEEF,QAAQ,CAAEE,KAAK,CAACL,UAAN,CAAiBY,MAAjB,CAAwB,SAACF,QAAD,CAAc,CAC9C,GAAMG,CAAAA,KAAK,CAAG,GAAIC,CAAAA,MAAJ,WAAcR,MAAM,CAACE,OAArB,EAAgC,IAAhC,CAAd,CACA,MAAOE,CAAAA,QAAQ,CAACK,KAAT,CAAeC,KAAf,CAAqBH,KAArB,CAAP,CACD,CAHS,CAFZ,GAOF,IAAKf,CAAAA,YAAL,CACE,sCACKO,KADL,MAEEF,QAAQ,CAAE,IAFZ,GAIF,IAAKR,CAAAA,gBAAL,CACE,sCAAYU,KAAZ,MAAmBJ,OAAO,CAAEO,OAA5B,GACF,IAAKZ,CAAAA,aAAL,CACE,sCAAYS,KAAZ,MAAmBJ,OAAO,CAAE,IAA5B,GACF,IAAKX,CAAAA,WAAL,CACE,sCAAYe,KAAZ,MAAmBH,OAAO,CAAE,IAA5B,GACF,IAAKX,CAAAA,gBAAL,CACE0B,OAAO,CAACb,KAAR,CAAcI,OAAd,EACA,sCACKH,KADL,MAEED,KAAK,CAAEI,OAFT,GAIF,QACE,MAAOH,CAAAA,KAAP,CAnDJ,CAqDD","sourcesContent":["import {\n  GET_CATEGORIES,\n  SET_LOADING,\n  CATEGORIES_ERROR,\n  ADD_CATEGORY,\n  DELETE_CATEGORY,\n  UPDATE_CATEGORY,\n  CURRENT_CATEGORY,\n  CLEAR_CURRENT,\n  FILTER_CATEGORIES,\n  CLEAR_FILTER\n} from '../actions/types';\n\nconst initialState = {\n  categories: null,\n  current: null,\n  loading: false,\n  filtered: null,\n  error: null\n};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case GET_CATEGORIES:\n      return { ...state, categories: payload, loading: false };\n    case ADD_CATEGORY:\n      return {\n        ...state,\n        categories: [...state.categories, payload],\n        loading: false\n      };\n    case UPDATE_CATEGORY:\n      return {\n        ...state,\n        categories: state.categories.map((category) =>\n          category._id === payload._id ? payload : category\n        ),\n        loading: false\n      };\n    case DELETE_CATEGORY:\n      return {\n        ...state,\n        categories: state.categories.filter(\n          (category) => category._id !== payload\n        ),\n        loading: false\n      };\n    case FILTER_CATEGORIES:\n      return {\n        ...state,\n        filtered: state.categories.filter((category) => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return category.title.match(regex);\n        })\n      };\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null\n      };\n    case CURRENT_CATEGORY:\n      return { ...state, current: payload };\n    case CLEAR_CURRENT:\n      return { ...state, current: null };\n    case SET_LOADING:\n      return { ...state, loading: true };\n    case CATEGORIES_ERROR:\n      console.error(payload);\n      return {\n        ...state,\n        error: payload\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}