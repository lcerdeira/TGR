{"ast":null,"code":"import { GET_LOCATIONS, SET_LOADING, LOCATIONS_ERROR, ADD_LOCATION, DELETE_LOCATION, UPDATE_LOCATION, CURRENT_LOCATION, CLEAR_CURRENT, FILTER_LOCATIONS, CLEAR_FILTER } from '../actions/types';\nconst initialState = {\n  locations: null,\n  current: null,\n  loading: false,\n  filtered: null,\n  error: null\n};\nexport default function (state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_LOCATIONS:\n      return { ...state,\n        locations: payload,\n        loading: false\n      };\n\n    case ADD_LOCATION:\n      return { ...state,\n        locations: [...state.locations, payload],\n        loading: false\n      };\n\n    case UPDATE_LOCATION:\n      return { ...state,\n        locations: state.locations.map(location => location._id === payload._id ? payload : location),\n        loading: false\n      };\n\n    case DELETE_LOCATION:\n      return { ...state,\n        locations: state.locations.filter(location => location._id !== payload),\n        loading: false\n      };\n\n    case FILTER_LOCATIONS:\n      return { ...state,\n        filtered: state.locations.filter(location => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return location.title.match(regex);\n        })\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null\n      };\n\n    case CURRENT_LOCATION:\n      return { ...state,\n        current: payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case SET_LOADING:\n      return { ...state,\n        loading: true\n      };\n\n    case LOCATIONS_ERROR:\n      console.error(payload);\n      return { ...state,\n        error: payload\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/lcer0001/GitHub/biodash/client/src/reducers/location.js"],"names":["GET_LOCATIONS","SET_LOADING","LOCATIONS_ERROR","ADD_LOCATION","DELETE_LOCATION","UPDATE_LOCATION","CURRENT_LOCATION","CLEAR_CURRENT","FILTER_LOCATIONS","CLEAR_FILTER","initialState","locations","current","loading","filtered","error","state","action","type","payload","map","location","_id","filter","regex","RegExp","title","match","console"],"mappings":"AAAA,SACEA,aADF,EAEEC,WAFF,EAGEC,eAHF,EAIEC,YAJF,EAKEC,eALF,EAMEC,eANF,EAOEC,gBAPF,EAQEC,aARF,EASEC,gBATF,EAUEC,YAVF,QAWO,kBAXP;AAaA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAE,IADQ;AAEnBC,EAAAA,OAAO,EAAE,IAFU;AAGnBC,EAAAA,OAAO,EAAE,KAHU;AAInBC,EAAAA,QAAQ,EAAE,IAJS;AAKnBC,EAAAA,KAAK,EAAE;AALY,CAArB;AAQA,eAAe,UAAUC,KAAK,GAAGN,YAAlB,EAAgCO,MAAhC,EAAwC;AACrD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AAEA,UAAQC,IAAR;AACE,SAAKlB,aAAL;AACE,aAAO,EAAE,GAAGgB,KAAL;AAAYL,QAAAA,SAAS,EAAEQ,OAAvB;AAAgCN,QAAAA,OAAO,EAAE;AAAzC,OAAP;;AACF,SAAKV,YAAL;AACE,aAAO,EACL,GAAGa,KADE;AAELL,QAAAA,SAAS,EAAE,CAAC,GAAGK,KAAK,CAACL,SAAV,EAAqBQ,OAArB,CAFN;AAGLN,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKR,eAAL;AACE,aAAO,EACL,GAAGW,KADE;AAELL,QAAAA,SAAS,EAAEK,KAAK,CAACL,SAAN,CAAgBS,GAAhB,CAAqBC,QAAD,IAC7BA,QAAQ,CAACC,GAAT,KAAiBH,OAAO,CAACG,GAAzB,GAA+BH,OAA/B,GAAyCE,QADhC,CAFN;AAKLR,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKT,eAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELL,QAAAA,SAAS,EAAEK,KAAK,CAACL,SAAN,CAAgBY,MAAhB,CACRF,QAAD,IAAcA,QAAQ,CAACC,GAAT,KAAiBH,OADtB,CAFN;AAKLN,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKL,gBAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELF,QAAAA,QAAQ,EAAEE,KAAK,CAACL,SAAN,CAAgBY,MAAhB,CAAwBF,QAAD,IAAc;AAC7C,gBAAMG,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAER,MAAM,CAACE,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,iBAAOE,QAAQ,CAACK,KAAT,CAAeC,KAAf,CAAqBH,KAArB,CAAP;AACD,SAHS;AAFL,OAAP;;AAOF,SAAKf,YAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELF,QAAAA,QAAQ,EAAE;AAFL,OAAP;;AAIF,SAAKR,gBAAL;AACE,aAAO,EAAE,GAAGU,KAAL;AAAYJ,QAAAA,OAAO,EAAEO;AAArB,OAAP;;AACF,SAAKZ,aAAL;AACE,aAAO,EAAE,GAAGS,KAAL;AAAYJ,QAAAA,OAAO,EAAE;AAArB,OAAP;;AACF,SAAKX,WAAL;AACE,aAAO,EAAE,GAAGe,KAAL;AAAYH,QAAAA,OAAO,EAAE;AAArB,OAAP;;AACF,SAAKX,eAAL;AACE0B,MAAAA,OAAO,CAACb,KAAR,CAAcI,OAAd;AACA,aAAO,EACL,GAAGH,KADE;AAELD,QAAAA,KAAK,EAAEI;AAFF,OAAP;;AAIF;AACE,aAAOH,KAAP;AAnDJ;AAqDD","sourcesContent":["import {\n  GET_LOCATIONS,\n  SET_LOADING,\n  LOCATIONS_ERROR,\n  ADD_LOCATION,\n  DELETE_LOCATION,\n  UPDATE_LOCATION,\n  CURRENT_LOCATION,\n  CLEAR_CURRENT,\n  FILTER_LOCATIONS,\n  CLEAR_FILTER\n} from '../actions/types';\n\nconst initialState = {\n  locations: null,\n  current: null,\n  loading: false,\n  filtered: null,\n  error: null\n};\n\nexport default function (state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case GET_LOCATIONS:\n      return { ...state, locations: payload, loading: false };\n    case ADD_LOCATION:\n      return {\n        ...state,\n        locations: [...state.locations, payload],\n        loading: false\n      };\n    case UPDATE_LOCATION:\n      return {\n        ...state,\n        locations: state.locations.map((location) =>\n          location._id === payload._id ? payload : location\n        ),\n        loading: false\n      };\n    case DELETE_LOCATION:\n      return {\n        ...state,\n        locations: state.locations.filter(\n          (location) => location._id !== payload\n        ),\n        loading: false\n      };\n    case FILTER_LOCATIONS:\n      return {\n        ...state,\n        filtered: state.locations.filter((location) => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return location.title.match(regex);\n        })\n      };\n    case CLEAR_FILTER:\n      return {\n        ...state,\n        filtered: null\n      };\n    case CURRENT_LOCATION:\n      return { ...state, current: payload };\n    case CLEAR_CURRENT:\n      return { ...state, current: null };\n    case SET_LOADING:\n      return { ...state, loading: true };\n    case LOCATIONS_ERROR:\n      console.error(payload);\n      return {\n        ...state,\n        error: payload\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}