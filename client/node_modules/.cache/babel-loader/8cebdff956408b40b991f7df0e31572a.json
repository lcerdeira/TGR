{"ast":null,"code":"import axios from 'axios';\nimport { GET_PLACES, SET_LOADING, PLACES_ERROR, ADD_PLACE, DELETE_PLACE, UPDATE_PLACE, CURRENT_PLACE, CLEAR_CURRENT, FILTER_PLACES, CLEAR_FILTER } from './types'; // Set loading to true\n\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n}; // Get places\n\nexport const getPlaces = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await axios.get('/api/places');\n    const data = await res.data;\n    dispatch({\n      type: GET_PLACES,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: PLACES_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Add place\n\nexport const addPlace = place => async dispatch => {\n  try {\n    setLoading();\n    const res = await axios.post('/api/places', place);\n    const data = await res.data;\n    dispatch({\n      type: ADD_PLACE,\n      payload: data\n    });\n  } catch (err) {\n    console.place(err);\n    dispatch({\n      type: PLACES_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Update place\n\nexport const updatePlace = place => async dispatch => {\n  try {\n    setLoading();\n    const res = await axios.patch(`/api/places/${place._id}`, place);\n    const data = await res.data;\n    dispatch({\n      type: UPDATE_PLACE,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: PLACES_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Delete place\n\nexport const deletePlace = id => async dispatch => {\n  try {\n    setLoading();\n    await axios.delete(`/api/places/${id}`);\n    dispatch({\n      type: DELETE_PLACE,\n      payload: id\n    });\n  } catch (err) {\n    dispatch({\n      type: PLACES_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; // Set current place\n\nexport const setCurrent = place => {\n  return {\n    type: CURRENT_PLACE,\n    payload: place\n  };\n}; // Clear current place\n\nexport const clearCurrent = () => {\n  return {\n    type: CLEAR_CURRENT\n  };\n}; // Filter\n\nexport const filterPlaces = text => {\n  return {\n    type: FILTER_PLACES,\n    payload: text\n  };\n}; // Clear Filter\n\nexport const clearFilter = () => {\n  return {\n    type: CLEAR_FILTER\n  };\n};","map":{"version":3,"sources":["/Users/lcer0001/GitHub/biodash/client/src/actions/place.js"],"names":["axios","GET_PLACES","SET_LOADING","PLACES_ERROR","ADD_PLACE","DELETE_PLACE","UPDATE_PLACE","CURRENT_PLACE","CLEAR_CURRENT","FILTER_PLACES","CLEAR_FILTER","setLoading","type","getPlaces","dispatch","res","get","data","payload","err","response","statusText","addPlace","place","post","console","updatePlace","patch","_id","deletePlace","id","delete","setCurrent","clearCurrent","filterPlaces","text","clearFilter"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {\n  GET_PLACES,\n  SET_LOADING,\n  PLACES_ERROR,\n  ADD_PLACE,\n  DELETE_PLACE,\n  UPDATE_PLACE,\n  CURRENT_PLACE,\n  CLEAR_CURRENT,\n  FILTER_PLACES,\n  CLEAR_FILTER\n} from './types';\n\n// Set loading to true\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};\n\n// Get places\nexport const getPlaces = () => async (dispatch) => {\n  try {\n    setLoading();\n    const res = await axios.get('/api/places');\n    const data = await res.data;\n    dispatch({\n      type: GET_PLACES,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: PLACES_ERROR,\n      payload: err.response.statusText\n    });\n  }\n};\n\n// Add place\nexport const addPlace = (place) => async (dispatch) => {\n  try {\n    setLoading();\n    const res = await axios.post('/api/places', place);\n    const data = await res.data;\n    dispatch({\n      type: ADD_PLACE,\n      payload: data\n    });\n  } catch (err) {\n    console.place(err);\n    dispatch({\n      type: PLACES_ERROR,\n      payload: err.response.statusText\n    });\n  }\n};\n\n// Update place\nexport const updatePlace = (place) => async (dispatch) => {\n  try {\n    setLoading();\n    const res = await axios.patch(`/api/places/${place._id}`, place);\n    const data = await res.data;\n    dispatch({\n      type: UPDATE_PLACE,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: PLACES_ERROR,\n      payload: err.response.statusText\n    });\n  }\n};\n\n// Delete place\nexport const deletePlace = (id) => async (dispatch) => {\n  try {\n    setLoading();\n    await axios.delete(`/api/places/${id}`);\n    dispatch({\n      type: DELETE_PLACE,\n      payload: id\n    });\n  } catch (err) {\n    dispatch({\n      type: PLACES_ERROR,\n      payload: err.response.statusText\n    });\n  }\n};\n\n// Set current place\nexport const setCurrent = (place) => {\n  return {\n    type: CURRENT_PLACE,\n    payload: place\n  };\n};\n\n// Clear current place\nexport const clearCurrent = () => {\n  return {\n    type: CLEAR_CURRENT\n  };\n};\n\n// Filter\nexport const filterPlaces = (text) => {\n  return { type: FILTER_PLACES, payload: text };\n};\n\n// Clear Filter\nexport const clearFilter = () => {\n  return { type: CLEAR_FILTER };\n};\n"]},"metadata":{},"sourceType":"module"}